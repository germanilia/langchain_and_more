from dotenv import load_dotenv
import os
from PyPDF2 import PdfReader
import streamlit as st
from langchain.text_splitter import CharacterTextSplitter
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain import FAISS
from langchain.chains.question_answering import load_qa_chain
from langchain.llms import OpenAI
from langchain.callbacks import get_openai_callback
from PIL import Image
from langchain.chat_models import ChatOpenAI
from langchain.prompts import PromptTemplate

summary = PromptTemplate.from_template("The client would like a summary answer to the question {summary}. The answer should be helpful, positive and brief")
detail = PromptTemplate.from_template("The client would like a summary answer to the question {detail}. The answer should be comprehensive and length and end with a relevant question to ask the client. The response will attempt to determine the client's investment appetite and risk tolerance.")
# Load environment variables
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
def process_text(text):
    # Split the text into chunks using Langchain's CharacterTextSplitter
    text_splitter = CharacterTextSplitter(
        separator="\n",
        chunk_size=1000,
        chunk_overlap=200,
        length_function=len
    )
    chunks = text_splitter.split_text(text)

    # Convert the chunks of text into embeddings to form a knowledge base
    embeddings = OpenAIEmbeddings()
    knowledgeBase = FAISS.from_texts(chunks, embeddings)

    return knowledgeBase


def main():

    st.title("Research PDF Explorer ðŸ’¬")
    logo = Image.open('static/Colour Logo.png')


    # Sidebar with a title, a logo and a slider
    st.sidebar.title('Agents & ToolsðŸ¦œ')
    st.sidebar.image(logo, use_column_width=True)
    temperature = st.sidebar.slider('Select a value', min_value=0.0, max_value=1.0, value=0.2, step=0.1)

    models = ["gpt-4", "gpt-4-0613",
              "gpt-3.5-turbo", "gpt-3.5-turbo-16k", "gpt-3.5-turbo-0613",
              "gpt-3.5-turbo-16k-0613", "text-davinci-003 (Legacy)",
              "text-davinci-002 (Legacy)"]

    model = st.sidebar.selectbox("Select a GPT Model", models, index=0)
    detail = st.sidebar.radio('Detail', ['Summary', 'Full'], horizontal=False)
    disclaimer = st.sidebar.radio('Disclaimer', ['Hide', 'Show'], horizontal=False)

    pdfs = st.file_uploader('Upload PDF Documents', type='pdf', accept_multiple_files=True)

    full_text = ["Text"]
    for pdf in pdfs:
        pdf_reader = PdfReader(pdf)
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text()
        full_text.append(text)

        # Join page texts into single string
    full_text = "\n".join(full_text)

    # print(f"full_text: {full_text}, type(full_text): {type(full_text)}")

    knowledgeBase = process_text(full_text)

    query = st.text_input('Ask a question about all documents')

    if query:
        if detail == "Summary":
            q = f"The client would like a summary answer to the question: '{query}'. The answer should be helpful, positive and brief"
        else:
            q = f"The client would like a summary answer to the question: '{query}'. The answer should be comprehensive and length and end with a relevant question to ask the client. The response will attempt to determine the client's investment appetite and risk tolerance."
        docs = knowledgeBase.similarity_search(query)

        # Query logic
        llm = ChatOpenAI(model=model, temperature=temperature)
        chain = load_qa_chain(llm, chain_type='stuff')

        with get_openai_callback() as cost:
            response = chain.run(input_documents=docs, question=q)
            print(cost)

        st.write(response)

        if disclaimer == 'Show':
            st.write("\n\n******\n\nThe financial advice generated by this artificial intelligence is for informational and educational purposes only. It should not be construed as professional financial advice. The AI system does not take into account your personal financial situation or investment objectives. You should always conduct your own research and/or consult a licensed financial advisor before making any investment decisions based on AI-generated advice. The creators of this AI and the hosting platform bear no responsibility for any investment choices or financial decisions made by users of this system. There are risks inherent in any investment; past performance does not guarantee future returns. Investments may lose value. By using this AI to obtain financial advice, you agree to hold harmless and release from liability the creators of this AI and its hosting platform from any claims of financial loss or other damages resulting from following or otherwise relying on any AI-generated advice. All investing involves risk, including the possible loss of principal, and there can be no guarantee that any investing strategy will be successful.")



if __name__ == "__main__":
    main()